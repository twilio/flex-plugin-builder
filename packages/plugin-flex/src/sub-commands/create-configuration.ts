import { progress } from '@twilio/flex-dev-utils';
import {
  CreateConfigurationOption,
  CreateConfiguration as ICreateConfiguration,
} from '@twilio/flex-plugins-api-client';

import * as flags from '../utils/flags';
import { createDescription } from '../utils/general';
import FlexPlugin, { FlexPluginFlags } from './flex-plugin';

type Multiple = { multiple: true };

interface CreateConfigurationFlags extends FlexPluginFlags {
  new: boolean;
  name?: string;
  'disable-plugin'?: string[];
  'enable-plugin'?: string[];
  description?: string;
}

const baseFlags = { ...FlexPlugin.flags };
// @ts-ignore
delete baseFlags.json;

/**
 * Creates a Configuration
 */
export default abstract class CreateConfiguration extends FlexPlugin {
  static topicName = 'flex:plugins:create-configuration';

  static description = createDescription(CreateConfiguration.topic.description, true);

  static nameFlag = {
    description: CreateConfiguration.topic.flags.name,
    default: `Autogenerated Release ${Date.now()}`,
    required: true,
    max: 100,
  };

  static enablePluginFlag: Partial<flags.IOptionFlag<string[]>> & Multiple = {
    description: CreateConfiguration.topic.flags.enablePlugin,
    multiple: true,
    required: false,
    alias: 'plugin',
  };

  static disablePluginFlag: Partial<flags.IOptionFlag<string[]>> & Multiple = {
    description: CreateConfiguration.topic.flags.disablePlugin,
    multiple: true,
    required: false,
  };

  static descriptionFlag = {
    description: CreateConfiguration.topic.flags.description,
    default: CreateConfiguration.topic.defaults.description,
    required: true,
    max: 500,
  };

  static aliasEnablePluginFlag: Partial<flags.IOptionFlag<string[]>> & Multiple = {
    ...CreateConfiguration.enablePluginFlag,
    alias: undefined,
    description: CreateConfiguration.topic.flags.plugin,
  };

  static flags = {
    ...baseFlags,
    new: flags.boolean({
      description: CreateConfiguration.topic.flags.new,
    }),
    name: flags.string(CreateConfiguration.nameFlag),
    plugin: flags.string(CreateConfiguration.aliasEnablePluginFlag),
    'enable-plugin': flags.string(CreateConfiguration.enablePluginFlag),
    'disable-plugin': flags.string(CreateConfiguration.disablePluginFlag),
    description: flags.string(CreateConfiguration.descriptionFlag),
  };

  /**
   * Performs the actual task of validating and creating configuration. This method is also usd by release script.
   */
  protected async doCreateConfiguration(): Promise<ICreateConfiguration> {
    return progress(`Creating configuration`, async () => this.createConfiguration(), false);
  }

  /**
   * Registers a configuration with Plugins API
   * @returns {Promise}
   */
  private async createConfiguration(): Promise<ICreateConfiguration> {
    const option: CreateConfigurationOption = {
      name: this._flags.name as string,
      addPlugins: [],
      removePlugins: [],
      description: this._flags.description || '',
    };
    if (!this._flags.new) {
      option.fromConfiguration = 'active';
    }
    if (this._flags['enable-plugin']) {
      option.addPlugins = this._flags['enable-plugin'] as string[];
    }
    if (this._flags['disable-plugin']) {
      option.removePlugins = this._flags['disable-plugin'] as string[];
    }

    return this.pluginsApiToolkit.createConfiguration(option);
  }

  get _flags(): CreateConfigurationFlags {
    return this.parse(CreateConfiguration).flags;
  }
}
