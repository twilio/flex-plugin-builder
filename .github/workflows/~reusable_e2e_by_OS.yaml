on:
  workflow_call:
    inputs:
      BRANCH:
        description: 'A branch passed from the caller workflow to run the test on.'
        required: true
        type: string
      PACKAGE_VERSION:
        description: 'A package-version of cli passed from the caller workflow. Which will be used to create and release plugins.'
        required: true
        type: string
      FLEX_UI_VERSION:
        description: 'A flex-ui version passed from the caller workflow. It decides the version of FLEX UI on tests will run on.'
        required: true
        type: string
      NPM_IGNORE_PREFIX:
        description: 'A npm-ignore-prefix passed from the caller workflow.'
        required: true
        type: string
      OS:
        description: 'Operating system passed from the caller workflow, it decides the OS on which the tests will run.'
        required: true
        type: string
      SEND_NOTIFICATION:
        description: 'A flag passed from the caller workflow, it decides whether to send slack notification or not.'
        required: true
        type: boolean
      SLACK_TITLE:
        description: 'A title passed from the caller workflow, it will be used in slack notification.'
        required: false
        type: string
        default: 'Flex Plugins CLI - E2E'
      SLACK_MESSAGE:
        description: 'A message passed from the caller workflow, it will be used in slack notification.'
        required: false
        type: string
        default: 'E2E tests'

    secrets:
      CONSOLE_EMAIL:
        required: true
      CONSOLE_PASSWORD:
        required: true
      CONSOLE_EMAIL_linux:
        description: 'An email passed from the caller workflow, it will be used for login in linux environment.'
        required: true
      TWILIO_ACCOUNT_SID_linux:
        description: 'An account-sid passed from the caller workflow, it will be used for authentication of APIs in linux environment.'
        required: true
      TWILIO_AUTH_TOKEN_linux:
        description: 'An account-token passed from the caller workflow, it will be used for authentication of APIs in linux environment.'
        required: true
      CONSOLE_EMAIL_win32:
        description: 'An email passed from the caller workflow, it will be used for login in windows environment.'
        required: true
      TWILIO_ACCOUNT_SID_win32:
        description: 'An account-sid passed from the caller workflow, it will be used for authentication of APIs in windows environment.'
        required: true
      TWILIO_AUTH_TOKEN_win32:
        description: 'An account-token passed from the caller workflow, it will be used for authentication of APIs in windows environment.'
        required: true
      CONSOLE_EMAIL_darwin:
        description: 'An email passed from the caller workflow, it will be used for login in mac environment.'
        required: true
      TWILIO_ACCOUNT_SID_darwin:
        description: 'An account-sid passed from the caller workflow, it will be used for authentication of APIs in mac environment.'
        required: true
      TWILIO_AUTH_TOKEN_darwin:
        description: 'An account-token passed from the caller workflow, it will be used for authentication of APIs in mac environment.'
        required: true
      SLACK_WEB_HOOK:
        description: 'A slack-web-hook passed from the caller workflow, it will be used for sending notifications.'
        required: true
env:
  BRANCH: ${{ inputs.BRANCH }}
  NPM_IGNORE_PREFIX: ${{ inputs.NPM_IGNORE_PREFIX }}
  PACKAGE_VERSION: ${{ inputs.PACKAGE_VERSION }}
  FLEX_UI_VERSION: ${{ inputs.FLEX_UI_VERSION }}
  CONSOLE_EMAIL: ${{ secrets.CONSOLE_EMAIL }}
  CONSOLE_PASSWORD: ${{ secrets.CONSOLE_PASSWORD }}
  CONSOLE_EMAIL_linux: ${{ secrets.CONSOLE_EMAIL_linux }}
  TWILIO_ACCOUNT_SID_linux: ${{ secrets.TWILIO_ACCOUNT_SID_linux }}
  TWILIO_AUTH_TOKEN_linux: ${{ secrets.TWILIO_AUTH_TOKEN_linux }}
  CONSOLE_EMAIL_win32: ${{ secrets.CONSOLE_EMAIL_win32 }}
  TWILIO_ACCOUNT_SID_win32: ${{ secrets.TWILIO_ACCOUNT_SID_win32 }}
  TWILIO_AUTH_TOKEN_win32: ${{ secrets.TWILIO_AUTH_TOKEN_win32 }}
  CONSOLE_EMAIL_darwin: ${{ secrets.CONSOLE_EMAIL_darwin }}
  TWILIO_ACCOUNT_SID_darwin: ${{ secrets.TWILIO_ACCOUNT_SID_darwin }}
  TWILIO_AUTH_TOKEN_darwin: ${{ secrets.TWILIO_AUTH_TOKEN_darwin }}
  NODE_OPTIONS: --max-old-space-size=8192

jobs:
  node20:
    runs-on: ${{ inputs.OS }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '22.1.x'
      - name: Install project dependencies (Linux)
        if: ${{ inputs.OS == 'ubuntu-22.04' }}
        run: |
          echo "Starting npm ci with a 10-minute timeout"
          for i in 1 2 3; do # Retry logic, retry 3 times
            timeout 10m npm ci --verbose && break || echo "npm ci failed, retrying ($i/3)..."
          done
      - name: Install project dependencies (Macos)
        if: ${{ inputs.OS == 'macos-latest' }}
        run: |
          echo "Starting npm ci with a 10-minute timeout"
          brew install coreutils
          for i in 1 2 3; do # Retry logic, retry 3 times
            gtimeout 10m npm ci --verbose && break || echo "npm ci failed, retrying ($i/3)..."
          done
      - name: Install project dependencies (Windows)
        if: ${{ inputs.OS == 'windows-latest' }}
        run: |
          npm --version
          echo "Starting npm ci with a 10-minute timeout"
            $attempts = 3
            for ($i=1; $i -le $attempts; $i++) {
              try {
                $process = Start-Process -FilePath 'npm' -ArgumentList 'ci --verbose' -NoNewWindow -PassThru
                if ($process.WaitForExit(600000)) { # 10 minutes in milliseconds
                  echo 'npm ci completed successfully'
                  exit 0
                } else {
                  echo 'npm ci timed out. Retrying...'
                  Stop-Process -Id $process.Id
                }
              } catch {
                echo 'npm ci failed.'
                if ($i -eq $attempts) {
                  throw 'npm ci failed after 3 retries.'
                }
              }
            }
        shell: pwsh
      - name: Build packages
        run: |
          npm run build
      - name: Run e2e tests - JS (Linux)
        if: ${{ inputs.OS == 'ubuntu-22.04' }}
        env:
          TS: 0
        run: |
          cd packages/flex-plugin-e2e-tests
          npm run start
      - name: Run e2e tests - JS (Macos)
        if: ${{ inputs.OS == 'macos-latest' }}
        env:
          TS: 0
        run: |
          echo "Starting e2e tests with a 90-minute timeout"
          cd packages/flex-plugin-e2e-tests
          for i in 1 2; do # Retry logic, retry 3 times
            gtimeout 90m npm run start && break || echo "E2E tests timed out, retrying ($i/3)..."
          done
      - name: Run e2e tests - JS (Windows)
        if: ${{ inputs.OS == 'windows-latest' }}
        env:
          TS: 0
        run: |
         cd packages/flex-plugin-e2e-tests
         npm run start
      - name: Kill node for Windows os
        if: ${{ inputs.OS == 'windows-latest' }}
        run: |
          echo "os is: ${{ inputs.OS }} ${{ runner.os }}"
          taskkill /f /im node.exe
      - name: Run e2e tests - TS (Linux)
        if: ${{ inputs.OS == 'ubuntu-22.04' }}
        env:
          TS: 1
        run: |
          cd packages/flex-plugin-e2e-tests
          npm run start
      - name: Run e2e tests - TS (Macos)
        if: ${{ inputs.OS == 'macos-latest' }}
        env:
          TS: 1
        run: |
         echo "Starting e2e tests with a 90-minute timeout"
          cd packages/flex-plugin-e2e-tests
          for i in 1 2; do # Retry logic, retry 3 times
            gtimeout 90m npm run start && break || echo "E2E tests timed out, retrying ($i/3)..."
          done
      - name: Run e2e tests - TS (Windows)
        if: ${{ inputs.OS == 'windows-latest' }}
        env:
          TS: 1
        run: |
          cd packages/flex-plugin-e2e-tests
          npm run start
      - name: Upload Screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ inputs.OS }}-screenshots
          path: packages/flex-plugin-e2e-tests/screenshots

  notify-failure:
    runs-on: ubuntu-22.04
    needs: node20
    if: ${{ always() && inputs.SEND_NOTIFICATION }}
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEB_HOOK }}
          SLACK_COLOR: ${{ needs.node20.result }}
          SLACK_USERNAME: Github Actions
          SLACK_ICON_EMOJI: ':ship:'
          SLACK_TITLE: '${{ inputs.SLACK_TITLE }} - ${{ inputs.OS }}'
          SLACK_MESSAGE: '${{ github.repository }}/${{ github.ref }} - ${{ inputs.SLACK_MESSAGE }} ${{ needs.node20.result }} for ${{ inputs.OS }}.'
          MSG_MINIMAL: actions url
